SHELL := /bin/bash

TOPDIR = $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
BINDIR ?= $(abspath $(TOPDIR)/.bin)
BINEXT = $(findstring .exe, $(patsubst Windows_NT, .exe, $(OS)))
CFGDIR ?= $(abspath $(TOPDIR)/configs)
OUTDIR ?= $(abspath $(TOPDIR)/.out)
TMPDIR ?= $(abspath $(TOPDIR)/.tmp)
TMPREL := $(shell realpath --relative-to="$(TOPDIR)" "$(TMPDIR)")

GO ?= go
GO_DLV ?= go run github.com/go-delve/delve/cmd/dlv
GO_FLAGS ?=

export PATH := $(BINDIR):$(PATH)

VERSION ?= $(shell cat $(TOPDIR)/VERSION)
GIT_SHA := $(shell git rev-parse HEAD)

ifeq ($(OS),Windows_NT)
  HOST_OS := windows
else ifeq ($(shell uname),Darwin)
  HOST_OS := darwin
else
  HOST_OS := linux
endif

ifeq ($(shell uname -p), arm)
  HOST_ARCH := arm64
else
  HOST_ARCH := amd64
endif

TARGET_OS ?= $(HOST_OS)
TARGET_ARCH ?= $(HOST_ARCH)

define merge_json
	mkdir -p $(dir $(3))
	-jq -rs 'reduce (try .[]) as $$item ({}; . * $$item)' $(1) $(2) > $(3)
endef

# from: https://github.com/cockroachdb/cockroach/blob/master/Makefile#L291
# make-lazy converts a recursive variable, which is evaluated every time it's
# referenced, to a lazy variable, which is evaluated only the first time it's
# used. See: http://blog.jgc.org/2016/07/lazy-gnu-make-variables.html
override make-lazy = $(eval $1 = $$(eval $1 := $(value $1))$$($1))

# This is how you get a literal space into a Makefile.
space := $(eval) $(eval)

# Color support.
yellow = $(shell { tput setaf 3 || tput AF 3; } 2>/dev/null)
cyan = $(shell { tput setaf 6 || tput AF 6; } 2>/dev/null)
term-reset = $(shell { tput sgr0 || tput me; } 2>/dev/null)
$(call make-lazy,yellow)
$(call make-lazy,cyan)
$(call make-lazy,term-reset)

help: ## Print help for targets with comments.
	@echo "Usage:"
	@echo "  make [target...] [VAR=foo VAR2=bar...]"
	@echo ""
	@echo "Useful commands:"
	@grep -Eh '^[a-zA-Z._-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(cyan)%-30s$(term-reset) %s\n", $$1, $$2}'
	@echo ""
	@echo "Useful variables:"
	@awk 'BEGIN { RS = "" ; FS = "\n" } /^## /{split($$NF, a, ":="); printf "  $(cyan)%-30s$(term-reset)", a[1]; x=1; while ( x<NF ) { c = substr($$x, 4); printf "  %-30s", c; x++} print ""}' $(MAKEFILE_LIST) | sort
	@echo ""
	@echo "Typical usage:"
	@printf "  $(cyan)%s$(term-reset)\n    %s\n\n" \
		"make deps" "Install all deps." \
		"make start" "Run all common services"

.DEFAULT_GOAL := help

# Makefile debug helpers
.PHONY: dumpvars
dumpvars: ## Dump all Makefile variables.
dumpvars: N := $(filter-out PATH, $(sort $(.VARIABLES)))
dumpvars: E := $(if $(exclude),$(exclude),default automatic)
dumpvars: S := $(eval) $(eval)
dumpvars:
	$(foreach V, $N, $(if $(filter-out $E, $(subst $S,-,$(origin $V))), $(info $V=$($V) ($(origin $V))),))
